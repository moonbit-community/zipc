// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/zipc/deflate"

// Values
fn adler32_check(Int64, Int64) -> Result[Unit, String]

fn adler32_equal(Int64, Int64) -> Bool

fn adler32_string(String) -> Int64

fn adler32_to_hex(Int64) -> String

fn crc32_check(Int64, Int64) -> Result[Unit, String]

fn crc32_equal(Int64, Int64) -> Bool

fn crc32_string(String) -> Int64

fn crc32_to_hex(Int64) -> String

fn deflate_compress(String, Level) -> Result[DeflateData, String]

fn deflate_decompress(DeflateData) -> Result[String, String]

fn deflate_decompress_string(String, Int) -> Result[String, String]

fn deflate_of_binary_string(String, Level) -> Result[String, String]

fn[T, E] err(E) -> Result[T, E]

fn level_best() -> Level

fn level_default() -> Level

fn level_fast() -> Level

fn level_none() -> Level

fn new_adler32() -> Int64

fn new_crc32() -> Int64

fn[T, E] ok(T) -> Result[T, E]

fn[T, E] unwrap(Result[T, E]) -> T

fn[T, E] unwrap_or(Result[T, E], T) -> T

fn zlib_compress(String, Level) -> Result[ZlibData, String]

fn zlib_decompress(ZlibData) -> Result[String, String]

fn zlib_of_binary_string(String, Level) -> Result[String, String]

fn zlib_to_binary_string(String, Int) -> Result[String, String]

// Errors

// Types and methods
type BlockType

pub struct DeflateData {
  compressed_bytes : String
  original_size : Int
  adler32_checksum : Int64
}

pub enum Level {
  None
  Fast
  Default
  Best
}
impl Show for Level

pub enum Result[T, E] {
  Ok(T)
  Err(E)
}

pub struct ZlibData {
  compressed_bytes : String
  original_size : Int
  adler32_checksum : Int64
}

// Type aliases
pub typealias Int64 as Adler32

pub typealias Int64 as Crc32

pub typealias Int as UInt16

pub typealias Int64 as UInt32

// Traits

