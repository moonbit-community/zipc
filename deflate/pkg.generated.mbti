// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/zipc/deflate"

import(
  "bobzhang/zipc/adler32"
  "bobzhang/zipc/crc32"
)

// Values
fn deflate_compress(Bytes, Level) -> DeflateData

fn deflate_decompress(DeflateData) -> Bytes raise

fn deflate_decompress_bytes(Bytes, Int) -> Bytes raise

fn deflate_decompress_raw_bytes(Bytes, Int) -> Bytes raise

fn deflate_of_bytes(Bytes, Level) -> Bytes

fn[T, E] err(E) -> Result[T, E]

fn gzip_compress_bytes(Bytes, Level, String?, String?, Int) -> GzipData

fn gzip_decompress_bytes(GzipData) -> Bytes raise

fn gzip_extract_metadata_bytes(Bytes) -> Result[GzipData, String]

fn gzip_of_bytes(Bytes, Level, String?, String?) -> Bytes

fn gzip_to_bytes(Bytes) -> Bytes raise

fn level_best() -> Level

fn level_default() -> Level

fn level_fast() -> Level

fn level_none() -> Level

fn[T, E] ok(T) -> Result[T, E]

fn[T, E] unwrap(Result[T, E]) -> T

fn[T, E] unwrap_or(Result[T, E], T) -> T

fn zlib_compress_bytes(Bytes, Level) -> ZlibData

fn zlib_decompress_bytes(ZlibData) -> Bytes raise

fn zlib_of_bytes(Bytes, Level) -> Bytes

fn zlib_to_bytes(Bytes, Int) -> Bytes raise

// Errors

// Types and methods
pub struct DeflateData {
  compressed_bytes : Bytes
  original_size : Int
  adler32_checksum : @adler32.Adler32
}

pub struct GzipData {
  compressed_bytes : Bytes
  original_size : Int
  crc32_checksum : @crc32.Crc32
  filename : String?
  comment : String?
  modification_time : Int
}

pub enum Level {
  None
  Fast
  Default
  Best
}
impl Show for Level

pub enum Result[T, E] {
  Ok(T)
  Err(E)
}

pub struct ZlibData {
  compressed_bytes : Bytes
  original_size : Int
  adler32_checksum : @adler32.Adler32
}

// Type aliases
pub typealias Int64 as UInt32

// Traits

